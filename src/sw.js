import { precacheAndRoute } from 'workbox-precaching';
import { registerRoute } from 'workbox-routing';
import { StaleWhileRevalidate, NetworkFirst } from 'workbox-strategies';
import { ExpirationPlugin } from 'workbox-expiration'; // Import ExpirationPlugin

// Precache all assets generated by webpack build
precacheAndRoute(self.__WB_MANIFEST);

// Cache images from Dicoding API
registerRoute(
  ({ url }) => url.origin === 'https://story-api.dicoding.dev' && url.pathname.startsWith('/images/stories'),
  new StaleWhileRevalidate({
    cacheName: 'dicoding-images-cache',
    plugins: [
      new ExpirationPlugin({
        maxEntries: 50, // Cache a maximum of 50 images
        maxAgeSeconds: 30 * 24 * 60 * 60, // Keep images for 30 days
      }),
    ],
  })
);

// Cache all other images (local or external)
registerRoute(
  ({ request }) => request.destination === 'image',
  new StaleWhileRevalidate({
    cacheName: 'generic-images-cache',
    plugins: [
      new ExpirationPlugin({
        maxEntries: 60, // Cache a maximum of 60 generic images
        maxAgeSeconds: 7 * 24 * 60 * 60, // Keep images for 7 days
      }),
    ],
  })
);

// Cache API JSON data from Dicoding API with NetworkFirst strategy
registerRoute(
  ({ url }) => url.origin === 'https://story-api.dicoding.dev' && url.pathname.startsWith('/stories'),
  new NetworkFirst({
    cacheName: 'dicoding-api-cache',
    networkTimeoutSeconds: 10,
    plugins: [
      new ExpirationPlugin({
        maxEntries: 100, // Cache a maximum of 100 API responses
        maxAgeSeconds: 24 * 60 * 60, // Keep API responses for 24 hours
      }),
    ],
  })
);

// Listen for push events and show notifications
self.addEventListener('push', function(event) {
  let data = {};
  try {
    if (event.data) {
      data = event.data.json();
    }
  } catch (e) {
    console.error('Push event data error:', e);
  }

  const title = data.title || 'ðŸ“¢ New Notification';
  const options = {
    body: data.body || 'Something interesting just happened!',
    icon: 'images/logo.png',
    badge: 'images/logo.png',
  };

  event.waitUntil(
    self.registration.showNotification(title, options)
  );
});

// Handle notification click event
self.addEventListener('notificationclick', (event) => {
  event.notification.close();
  const urlToOpen = event.notification.data.url;

  event.waitUntil(
    clients.matchAll({ type: 'window', includeUncontrolled: true }).then((clientList) => {
      for (const client of clientList) {
        if (client.url === urlToOpen && 'focus' in client) {
          return client.focus();
        }
      }
      if (clients.openWindow) {
        return clients.openWindow(urlToOpen);
      }
    })
  );
});
